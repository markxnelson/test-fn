box: alpine:edge

build: 
  docker: true
  steps:
    - script:
      name: Install pre-reqs
      code: |
        apt-get update
        apt-get -y install wget curl docker
    - script:
      name: Start fn server
      code: | 
        docker run --privileged -d --rm --name functions --network=$DOCKER_NETWORK_NAME -v $PWD/data:/app/data -p 8080:8080 fnproject/fnserver
    - script: 
      name: Install fn cli
      code: |
        wget https://github.com/fnproject/cli/releases/download/0.4.120/fn_alpine 
        mv fn_alpine fn
        chmod +x fn
        fn help
    - script:
        name: Install fn CLI (do this once for all the fn pipelines)
        code: |
          mkdir $WERCKER_ROOT/fn
          cd $WERCKER_ROOT/fn
          wget --no-verbose https://github.com/fnproject/cli/releases/download/0.4.117/fn_alpine  # need to replace with a URI to the latest version
          mv fn_alpine fn
          chmod a+x $WERCKER_ROOT/fn/fn
          export PATH=$WERCKER_ROOT/fn:$PATH
          fn --version
    - script:
        name: Login to Docker Hub (so we can deploy the function to it)
        code: docker login -u $USERNAME -p $PASSWORD
    - script:
        name: Build and deploy function to Docker Hub
        code: |
          #
          echo $DOCKER_HOST
          docker ps --no-trunc
          sleep 5
          echo Trying to contact fn server
          docker ps
          ping -c 3 functions
          curl functions:8080
          #
          cd $WERCKER_ROOT/test-fn1
          export FN_REGISTRY=docker.io/$USERNAME
          export FN_API_URL=http://functions:8080
          fn deploy --app myapp
    - script:
        name: List deployed functions
        code: |
          fn list routes myapp
    - script:
        name: Invoke the function and verify it returns the expected result
        code: |
            if curlOutput=`curl -s functions:8080/r/myapp/test-fn1`; then
                export expected='{"message":"Hello World"}'
                if [ "$curlOutput" == "$expected" ]; then
                    echo "Test passed: function gave expected response: " $expected
                else
                    echo "Test failed: function gave unexpected response: " $curlOutput
                    echo "The expected response was: " $expected
                    exit 1
                fi
            else
                echo "Test failed: function did not respond"
                exit 1
            fi
  after-steps:
    - script:
        name: Clean up
        code: |
          # kill fn server (don't fail if there isn't one)
          docker kill functions 2> /dev/null | true
